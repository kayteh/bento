#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const protobufjs_1 = __importDefault(require("protobufjs"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const glob_1 = __importDefault(require("glob"));
const tsOutput = __importStar(require("./renderer/ts-output"));
const StringRenderer_1 = __importDefault(require("./renderer/StringRenderer"));
const BENTO_LOC = process.env.BENTO_LOC || '@kayteh/bento';
const flatten = (array) => array.reduce((acc, cur) => [...acc, ...cur], []);
exports.writeOut = (filepath, content) => __awaiter(this, void 0, void 0, function* () {
    // still assuming ts.
    const fn = filepath.replace('.proto', '.bento.ts');
    const base = path_1.default.basename(fn);
    const atom = fn.replace(base, `.${base}~`);
    yield fs_extra_1.default.writeFile(atom, content, { encoding: 'utf8' });
    yield fs_extra_1.default.rename(atom, fn);
});
exports.render = (rd) => {
    // assuming ts renderer for now
    // types first
    const { r, data } = new StringRenderer_1.default();
    r(`/**
 * GENERATED FILE. This file was generated by @kayteh/bento. Editing it is a bad idea.
 * @generated
 */`);
    r(`import Bento, { IBentoTransport } from '${BENTO_LOC}'`);
    for (let t of rd.types) {
        r(tsOutput.renderType(t));
    }
    for (let s of rd.services) {
        r(tsOutput.renderService(s));
    }
    return data();
};
exports.prepRender = (filePath, root) => {
    const rd = {
        filePath,
        types: [],
        services: []
    };
    console.log({ root });
    for (const obj of root.nestedArray) {
        // if (!filePath.includes(obj.filename || '')) {
        //   continue
        // }
        if (obj instanceof protobufjs_1.default.Type) {
            // console.log('got type', obj.name)
            if (obj.options !== undefined && obj.options['render.exclude'] === true) {
                continue;
            }
            rd.types.push(obj);
            continue;
        }
        if (obj instanceof protobufjs_1.default.Service) {
            // console.log('got service', obj.name)
            rd.services.push(obj);
            continue;
        }
    }
    return rd;
};
const injectResolvePath = (root, paths) => {
    const mainFiles = [];
    // console.log(paths)
    root.resolvePath = (origin, target) => {
        // console.log({ origin, target })
        let normOrigin = protobufjs_1.default.util.path.normalize(origin);
        let normTarget = protobufjs_1.default.util.path.normalize(target);
        if (!normOrigin) {
            mainFiles.push(normTarget);
        }
        // console.log({ normOrigin, normTarget })
        let resolved = protobufjs_1.default.util.path.resolve(normOrigin, normTarget, true);
        let idx = resolved.lastIndexOf('google/protobuf/');
        if (idx > -1) {
            let altname = resolved.substring(idx);
            // console.log({ altname, resolved })
            if (altname in protobufjs_1.default.common) {
                resolved = altname;
            }
        }
        // console.log({ resolved })
        // console.log(1)
        if (fs_extra_1.default.existsSync(resolved)) {
            // console.log(2)
            return resolved;
        }
        for (let path of paths) {
            let iresolved = protobufjs_1.default.util.path.resolve(path + '/', target);
            // console.log(3, { path, target })
            if (fs_extra_1.default.existsSync(iresolved)) {
                // console.log(4, { iresolved })
                return iresolved;
            }
        }
        // console.log(5, { resolved })
        return resolved;
    };
};
const processFile = (fileName) => __awaiter(this, void 0, void 0, function* () {
    if (fileName.includes('node_modules')) {
        return;
    }
    const root = new protobufjs_1.default.Root();
    const paths = [
        path_1.default.relative(process.cwd(), path_1.default.dirname(require.resolve('protobufjs'))),
        path_1.default.resolve(path_1.default.join(__dirname, '../../proto-inc'))
    ];
    injectResolvePath(root, paths);
    const f = yield root.load(fileName);
    const rd = exports.prepRender(fileName, f);
    const rendered = exports.render(rd);
    yield exports.writeOut(fileName, rendered);
    tsOutput.postWriteTasks(fileName);
    // TODO: add chalk
    console.log(`📝 Wrote out ${fileName}`);
    console.log(`-- Found RPCs: ${rd.services.map(v => v.name).join(', ')}`);
    console.log(`-- Found types: ${rd.types.map(v => v.name).join(', ')}`);
    console.log('');
});
exports.run = (globPaths) => __awaiter(this, void 0, void 0, function* () {
    const globOpts = {
        ignore: ['./node_modules/**/*.proto', path_1.default.join(__dirname, 'proto-inc/**/*.proto')]
    };
    // console.log({ globPaths })
    const globs = globPaths.map(p => glob_1.default.sync(p, globOpts));
    const files = flatten(globs);
    // console.log(files)
    if (files.length === 0) {
        console.error('No files found.');
    }
    for (const file of files) {
        yield processFile(file);
    }
});
if (require.main === module) {
    exports.run(process.argv.slice(2)).catch((e) => {
        console.error(e);
    });
}
