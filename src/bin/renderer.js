#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
exports.__esModule = true;
var protobufjs_1 = require("protobufjs");
var path_1 = require("path");
var fs_extra_1 = require("fs-extra");
var glob_1 = require("glob");
var tsOutput = require("./renderer/ts-output");
var StringRenderer_1 = require("./renderer/StringRenderer");
var BENTO_LOC = process.env.BENTO_LOC || '@kayteh/bento';
var flatten = function (array) { return array.reduce(function (acc, cur) { return acc.concat(cur); }, []); };
exports.writeOut = function (filepath, content) { return __awaiter(_this, void 0, void 0, function () {
    var fn, base, atom;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                fn = filepath.replace('.proto', '.bento.ts');
                base = path_1["default"].basename(fn);
                atom = fn.replace(base, "." + base + "~");
                return [4 /*yield*/, fs_extra_1["default"].writeFile(atom, content, { encoding: 'utf8' })];
            case 1:
                _a.sent();
                return [4 /*yield*/, fs_extra_1["default"].rename(atom, fn)];
            case 2:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
exports.render = function (rd) {
    // assuming ts renderer for now
    // types first
    var _a = new StringRenderer_1["default"](), r = _a.r, data = _a.data;
    r("/**\n * GENERATED FILE. This file was generated by @kayteh/bento. Editing it is a bad idea.\n * @generated\n */");
    r("import Bento, { IBentoTransport } from '" + BENTO_LOC + "'");
    for (var _i = 0, _b = rd.types; _i < _b.length; _i++) {
        var t = _b[_i];
        r(tsOutput.renderType(t));
    }
    for (var _c = 0, _d = rd.services; _c < _d.length; _c++) {
        var s = _d[_c];
        r(tsOutput.renderService(s));
    }
    return data();
};
exports.prepRender = function (filePath, root) {
    var rd = {
        filePath: filePath,
        types: [],
        services: []
    };
    console.log({ root: root });
    for (var _i = 0, _a = root.nestedArray; _i < _a.length; _i++) {
        var obj = _a[_i];
        // if (!filePath.includes(obj.filename || '')) {
        //   continue
        // }
        if (obj instanceof protobufjs_1["default"].Type) {
            // console.log('got type', obj.name)
            if (obj.options !== undefined && obj.options['render.exclude'] === true) {
                continue;
            }
            rd.types.push(obj);
            continue;
        }
        if (obj instanceof protobufjs_1["default"].Service) {
            // console.log('got service', obj.name)
            rd.services.push(obj);
            continue;
        }
    }
    return rd;
};
var injectResolvePath = function (root, paths) {
    var mainFiles = [];
    // console.log(paths)
    root.resolvePath = function (origin, target) {
        // console.log({ origin, target })
        var normOrigin = protobufjs_1["default"].util.path.normalize(origin);
        var normTarget = protobufjs_1["default"].util.path.normalize(target);
        if (!normOrigin) {
            mainFiles.push(normTarget);
        }
        // console.log({ normOrigin, normTarget })
        var resolved = protobufjs_1["default"].util.path.resolve(normOrigin, normTarget, true);
        var idx = resolved.lastIndexOf('google/protobuf/');
        if (idx > -1) {
            var altname = resolved.substring(idx);
            // console.log({ altname, resolved })
            if (altname in protobufjs_1["default"].common) {
                resolved = altname;
            }
        }
        // console.log({ resolved })
        // console.log(1)
        if (fs_extra_1["default"].existsSync(resolved)) {
            // console.log(2)
            return resolved;
        }
        for (var _i = 0, paths_1 = paths; _i < paths_1.length; _i++) {
            var path_2 = paths_1[_i];
            var iresolved = protobufjs_1["default"].util.path.resolve(path_2 + '/', target);
            // console.log(3, { path, target })
            if (fs_extra_1["default"].existsSync(iresolved)) {
                // console.log(4, { iresolved })
                return iresolved;
            }
        }
        // console.log(5, { resolved })
        return resolved;
    };
};
var processFile = function (fileName) { return __awaiter(_this, void 0, void 0, function () {
    var root, paths, f, rd, rendered;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (fileName.includes('node_modules')) {
                    return [2 /*return*/];
                }
                root = new protobufjs_1["default"].Root();
                paths = [
                    path_1["default"].relative(process.cwd(), path_1["default"].dirname(require.resolve('protobufjs'))),
                    path_1["default"].resolve(path_1["default"].join(__dirname, '../../proto-inc'))
                ];
                injectResolvePath(root, paths);
                return [4 /*yield*/, root.load(fileName)];
            case 1:
                f = _a.sent();
                rd = exports.prepRender(fileName, f);
                rendered = exports.render(rd);
                return [4 /*yield*/, exports.writeOut(fileName, rendered)];
            case 2:
                _a.sent();
                tsOutput.postWriteTasks(fileName);
                // TODO: add chalk
                console.log("\uD83D\uDCDD Wrote out " + fileName);
                console.log("-- Found RPCs: " + rd.services.map(function (v) { return v.name; }).join(', '));
                console.log("-- Found types: " + rd.types.map(function (v) { return v.name; }).join(', '));
                console.log('');
                return [2 /*return*/];
        }
    });
}); };
exports.run = function (globPaths) { return __awaiter(_this, void 0, void 0, function () {
    var globOpts, globs, files, _i, files_1, file;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                globOpts = {
                    ignore: ['./node_modules/**/*.proto', path_1["default"].join(__dirname, 'proto-inc/**/*.proto')]
                };
                globs = globPaths.map(function (p) { return glob_1["default"].sync(p, globOpts); });
                files = flatten(globs);
                // console.log(files)
                if (files.length === 0) {
                    console.error('No files found.');
                }
                _i = 0, files_1 = files;
                _a.label = 1;
            case 1:
                if (!(_i < files_1.length)) return [3 /*break*/, 4];
                file = files_1[_i];
                return [4 /*yield*/, processFile(file)];
            case 2:
                _a.sent();
                _a.label = 3;
            case 3:
                _i++;
                return [3 /*break*/, 1];
            case 4: return [2 /*return*/];
        }
    });
}); };
if (require.main === module) {
    exports.run(process.argv.slice(2))["catch"](function (e) {
        console.error(e);
    });
}
